#version 430 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aUV;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBiTangent;
//layout (location = 6) in vec3 lol;

out vec3 fragPosWorld;
out vec3 vertexColor;
out vec3 normalWorld;
out vec3 tangentWorld;
out vec3 biTangentWorld;
out vec2 UV;
out vec3 posTan;
out vec3 camTan;

out vec4 fragDepthShadow;

uniform vec3 camPos;
uniform mat4 mvp;
uniform mat4 objectSpace;
uniform mat4 world2obj;
uniform mat4 shadowProj;

//this function allows us to od transformations from tangent object space to tangent space;
mat3 basisChange(vec3 u,vec3 v, vec3 w);

void main()
{

	//because normal vectors are NOT affected by translations
	mat3 worldRot = mat3(objectSpace[0].xyz,objectSpace[1].xyz, objectSpace[2].xyz);
	normalWorld = normalize(aNormal);
	normalWorld = vec3(worldRot*(normalWorld));
	tangentWorld = vec3(worldRot*(aTangent));
	biTangentWorld = vec3(worldRot*(aBiTangent));
	fragPosWorld = vec3(objectSpace * vec4(aPos,1));
	UV = aUV;
	vertexColor = worldRot[1].xyz;
	//This matrix will take any vector from world coorinate and tranform it to tangent coordinate.
	mat3 TBN = basisChange(aTangent, aBiTangent, aNormal);
	posTan = ( TBN * (aPos));
	camTan = ( TBN * vec3(world2obj * vec4(camPos,1)));
	//camTan = vec3(TBN[0].y, TBN[1].y, TBN[2].y);
	//posTan = objToTan[1].xyz;
	gl_Position = mvp*vec4(aPos, 1.0);

    fragDepthShadow = (shadowProj * vec4(fragPosWorld, 1));
    
}

mat3 basisChange(vec3 u, vec3 v, vec3 w){
	return inverse(mat3(
	u,
	v,
	w));
}